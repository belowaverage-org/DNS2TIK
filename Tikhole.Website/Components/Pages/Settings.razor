@page "/Settings"
@using System.Net

<PageTitle>⚙️ Settings</PageTitle>

<h1>⚙️ Settings</h1>
<p class="text-secondary">
    <small>A list of Tikhole settings. Changes made here are in real-time.</small>
</p>
<hr />
@if (Error != "")
{
    <div class="toast show position-fixed bottom-0 end-0 m-3">
        <div class="toast-header">
            <strong class="me-auto">⚠️ Error</strong>
        </div>
        <div class="toast-body">
            @Error
        </div>
    </div>
}
<div style="max-width:500px;">
    <h5>🌎 RouterOS Settings</h5>
    <hr />
    <div class="mb-3">
        <label class="form-label">API Endpoint</label>
        <InputText @bind-Value="CommitterEndpoint" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">API Username</label>
        <InputText @bind-Value="CommitterUserName" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">API Password</label>
        <InputText type="password" @bind-Value="CommitterPassword" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Commit Delay</label>
        <InputText @bind-Value="ComitterDelayMS" class="form-control" />
        <div class="form-text">After a DNS response is matched and committed, Tikhole will wait this many milliseconds before forwarding the DNS response since RouterOS takes some time process the new IP on an address list. This only happens on commits that are adding to an address list. Commits that just refresh the timeout do not delay DNS responses.</div>
    </div>
    <hr />
    <div class="mb-3">
        <label class="form-label">IP List Timeout</label>
        <InputText @bind-Value="CommiterIPListTimeout" class="form-control" />
        <div class="form-text">This is the timeout value used when a matched DNS record is added to the RouterOS firewall IP list.</div>
    </div>
    <hr />
    <h5>⏩ Forwarder Settings</h5>
    <hr />
    <div class="mb-3">
        <label class="form-label">DNS Server Endpoint</label>
        <InputText @bind-Value="ForwarderDNSEndpoint" class="form-control" />
        <div class="form-text">This is the DNS server that requests recieved by Tikhole are sent to.</div>
    </div>
    <hr />
    <h5>⏪ Responder Settings</h5>
    <hr />
    <div class="mb-3">
        <label class="form-label">Respond After Match and or Commit</label>
        <InputText @bind-Value="ResponderWaitForMatchCommit" class="form-control" />
        <div class="form-text">Wait for the matching and committer engine before replying to a DNS query.</div>
    </div>
    <hr />
    <h5>📜 Logger Settings</h5>
    <hr />
    <div class="mb-3">
        <label class="form-label">Verbose Mode</label>
        <InputText @bind-Value="LoggerVerboseMode" class="form-control" />
    </div>
</div>

@code {
    private string Error { get; set; } = "";
    private string CommitterEndpoint
    {
        get
        {
            return Engine.Committer.RouterOSIPEndPoint.ToString();
        }
        set
        {
            try
            {
                Engine.Committer.RouterOSIPEndPoint = IPEndPoint.Parse(value);
                Engine.Tikhole.Configurator?.SaveConfig();
                Error = "";
            }
            catch (Exception e)
            {
                Error = e.Message;
            }
        }
    }
    private string CommitterUserName
    {
        get
        {
            return Engine.Committer.UserName;
        }
        set
        {
            Engine.Committer.UserName = value;
            Engine.Tikhole.Configurator?.SaveConfig();
        }
    }
    private string CommitterPassword
    {
        get
        {
            return Engine.Committer.Password;
        }
        set
        {
            Engine.Committer.Password = value;
            Engine.Tikhole.Configurator?.SaveConfig();
        }
    }
    private string CommiterIPListTimeout
    {
        get
        {
            return Engine.Committer.ListTTL;
        }
        set
        {
            Engine.Committer.ListTTL = value;
            Engine.Tikhole.Configurator?.SaveConfig();
        }
    }
    private string ForwarderDNSEndpoint
    {
        get
        {
            return Engine.Forwarder.DNSServer.ToString();
        }
        set
        {
            try
            {
                Engine.Forwarder.DNSServer = IPEndPoint.Parse(value);
                Engine.Tikhole.Configurator?.SaveConfig();
                Error = "";
            }
            catch (Exception e)
            {
                Error = e.Message;
            }
        }
    }
    private string ResponderWaitForMatchCommit
    {
        get
        {
            return Engine.Responder.WaitForMatcherAndCommitter.ToString();
        }
        set
        {
            try
            {
                Engine.Responder.WaitForMatcherAndCommitter = bool.Parse(value);
                Engine.Tikhole.Configurator?.SaveConfig();
                Error = "";
            }
            catch (Exception e)
            {
                Error = e.Message;
            }
        }
    }
    private string LoggerVerboseMode
    {
        get
        {
            return Engine.Logger.VerboseMode.ToString();
        }
        set
        {
            try
            {
                Engine.Logger.VerboseMode = bool.Parse(value);
                Engine.Tikhole.Configurator?.SaveConfig();
                Error = "";
            }
            catch (Exception e)
            {
                Error = e.Message;
            }
        }
    }
    private string ComitterDelayMS
    {
        get
        {
            return Engine.Committer.ComitterDelayMS.ToString();
        }
        set
        {
            try
            {
                Engine.Committer.ComitterDelayMS = uint.Parse(value);
                Engine.Tikhole.Configurator?.SaveConfig();
                Error = "";
            }
            catch (Exception e)
            {
                Error = e.Message;
            }
        }
    }
}