@page "/Rules/{Index:int}"
@inject NavigationManager NavigationManager
@using System.Reflection
@using System.Text.RegularExpressions
@using global::Tikhole.Engine

<PageTitle>📃 Rule: @(EngineRule?.Name ?? "New")</PageTitle>

    @if (Error != "")
{
    <div class="toast show position-fixed bottom-0 end-0 m-3">
        <div class="toast-header">
            <strong class="me-auto">⚠️ Error</strong>
        </div>
        <div class="toast-body">
            @Error
        </div>
    </div>
}

<h1>📃 Rule: @(EngineRule?.Name ?? "New")</h1>
<p class="text-secondary">
    @if (EngineRuleType == null)
    {
        <small>Select a rule type below.</small>
    }
    else
    {
        RuleAttribute? ruleAttribute = EngineRuleType.GetCustomAttribute<RuleAttribute>();
        <small>@ruleAttribute?.Name</small><br />
        <small><i>@ruleAttribute?.Hint</i></small>
    }
</p>
<hr />
<a href="/Rules" class="btn btn-dark">⬅️ Back</a>
@if (EngineRuleType != null)
{
    <button class="btn btn-dark" @onclick="SaveSettings">💾 Save</button>
}
@if (EngineRule != null)
{
    @if (DeleteIntent)
    {
        <button class="btn btn-dark float-end" @onclick="InvokeDelete">⚠️ Confirm?</button>
    }
    else
    {
        <button class="btn btn-dark float-end" @onclick="InvokeDelete">🗑️ Delete</button>
    }
}
<hr />
<div style="max-width:500px;">
    @if (EngineRuleType == null)
    {
        <div class="container">
        @foreach (Type rule in EngineAssembly.GetTypes())
        {
            RuleAttribute? ra = rule.GetCustomAttribute<RuleAttribute>();
            if (ra == null) continue;
            <div class="row mb-3">
                <button class="col-5 btn btn-dark" @onclick="() => { EngineRuleType = rule; }">@ra.Name</button>
                <span class="col form-text">@ra.Hint</span>
            </div>
        }
        </div>
    }
    else
    {
        FieldInfo[] fields = EngineRuleType.GetFields().OrderBy(FieldInfo => FieldInfo?.GetCustomAttribute<RuleFieldAttribute>()?.Order).ToArray();
        foreach (FieldInfo field in fields)
        {
            RuleFieldAttribute? fa = field.GetCustomAttribute<RuleFieldAttribute>();
            if (fa == null) continue;
            <div class="mb-3">
                <label class="form-label">@fa.Name</label>
                @{
                    string value = "";
                    if (Settings.ContainsKey(field.Name)) value = Settings[field.Name];
                }
                @if (field.FieldType == typeof(Regex))
                {
                    <InputTextArea rows="10" Value="@value" ValueExpression="() => value" ValueChanged="(value) => SetSetting(field.Name, value)" class="form-control" />
                }
                else if (field.FieldType == typeof(bool))
                {
                    bool bValue;
                    if (!bool.TryParse(value, out bValue))
                    {
                        bValue = true;
                        SetSetting(field.Name, "True");
                    }
                    <div class="form-check form-switch float-end">
                        <InputCheckbox Value="@bValue" ValueExpression="() => bValue" ValueChanged="(value) => SetSetting(field.Name, value.ToString())" class="form-check-input" />
                    </div>
                }
                else
                {
                    <InputText Value="@value" ValueExpression="() => value" ValueChanged="(value) => SetSetting(field.Name, value)" class="form-control" />
                }
                @if (fa.Hint != null) {
                    <div class="form-text">@fa.Hint</div>
                }
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public int Index { get; set; }
    private string Error { get; set; } = "";
    private Type? EngineRuleType;
    private Engine.Rule? EngineRule;
    private bool DeleteIntent = false;
    private Assembly EngineAssembly = Assembly.GetAssembly(typeof(Engine.Tikhole))!;
    private Dictionary<string, string> Settings = new();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Index < Engine.Matcher.Rules.Count && Index >= 0) EngineRule = Engine.Matcher.Rules[Index];
        if (EngineRule != null) EngineRuleType = EngineRule.GetType();
        LoadSettings();
    }
    private async void InvokeDelete()
    {
        if (DeleteIntent == true)
        {
            Delete();
            return;
        }
        DeleteIntent = true;
        await Task.Delay(2000);
        DeleteIntent = false;
        StateHasChanged();
    }
    private void LoadSettings()
    {
        if (EngineRuleType == null) return;
        Settings.Clear();
        foreach (FieldInfo field in EngineRuleType.GetFields())
        {
            string value = field.GetValue(EngineRule)?.ToString() ?? "";
            if (field.FieldType == typeof(System.Timers.Timer))
            {
                value = (((System.Timers.Timer)field.GetValue(EngineRule)!).Interval / 1000).ToString();
            }
            Settings.Add(field.Name, value);
        }
    }
    private void SetSetting(string Setting, string Value)
    {
        Settings[Setting] = Value;
    }
    private void SaveSettings()
    {
        Error = "";
        if (EngineRuleType == null) return;
        try
        {
            List<object> parameters = new();
            ConstructorInfo engineRuleConstructor = EngineRuleType.GetConstructors().First();
            foreach (ParameterInfo param in engineRuleConstructor.GetParameters())
            {
                if (param.Name == null) continue;
                if (param.ParameterType == typeof(bool))
                {
                    parameters.Add(bool.Parse(Settings[param.Name]));
                }
                if (param.ParameterType == typeof(Regex))
                {
                    parameters.Add(new Regex(Settings[param.Name]));
                }
                if (param.ParameterType == typeof(System.Timers.Timer))
                {
                    parameters.Add(new System.Timers.Timer(double.Parse(Settings[param.Name]) * 1000));
                }
                if (param.ParameterType == typeof(Uri))
                {
                    parameters.Add(new Uri(Settings[param.Name]));
                }
                if (param.ParameterType == typeof(string))
                {
                    parameters.Add(Settings[param.Name]);
                }
            }
            Engine.Rule rule = (Engine.Rule)engineRuleConstructor.Invoke(parameters.ToArray());
            if (EngineRule == null)
            {
                Engine.Matcher.Rules.Add(rule);
                Index = Engine.Matcher.Rules.IndexOf(rule);
            }
            else
            {
                Engine.Matcher.Rules[Index].Dispose();
                Engine.Matcher.Rules[Index] = rule;
            }
            Engine.Configurator.SaveConfig();
            NavigationManager.NavigateTo("/Rules/" + Index);
            OnInitialized();
        }
        catch (Exception e)
        {
            Error = e.Message;
        }
    }
    private void Delete()
    {
        if (EngineRule != null)
        {
            EngineRule.Dispose();
            Engine.Matcher.Rules.Remove(EngineRule);
        }
        Engine.Configurator.SaveConfig();
        NavigationManager.NavigateTo("/Rules");
    }
}