@page "/Rules/{Index:int}"
@inject NavigationManager NavigationManager
@using System.Reflection
@using System.Text.RegularExpressions
@using global::Tikhole.Engine

<PageTitle>📃 Rule: @EngineRule?.Name</PageTitle>

    @if (Error != "")
{
    <div class="toast show position-fixed bottom-0 end-0 m-3">
        <div class="toast-header">
            <strong class="me-auto">⚠️ Error</strong>
        </div>
        <div class="toast-body">
            @Error
        </div>
    </div>
}

<h1>📃 Rule: @EngineRule?.Name</h1>
<p class="text-secondary">
    @{
        RuleAttribute? ruleAttribute = EngineRule?.GetType().GetCustomAttribute<RuleAttribute>();
    }
    <small>@ruleAttribute?.Name</small><br />
    <small><i>@ruleAttribute?.Hint</i></small>
</p>
<hr />
<a href="/Rules" class="btn btn-dark">⬅️ Cancel</a>
<button class="btn btn-dark" @onclick="SaveSettings">💾 Save</button>
    @if (EngineRule != null)
    {
        @if (DeleteIntent)
        {
            <button class="btn btn-dark float-end" @onclick="InvokeDelete">⚠️ Confirm?</button>
        }
        else
        {
            <button class="btn btn-dark float-end" @onclick="InvokeDelete">🗑️ Delete</button>
        }
    }
<hr />
<div style="max-width:500px;">
    @if (EngineRule == null)
    {
        foreach (Type rule in EngineAssembly.GetTypes())
        {
            RuleAttribute? ra = rule.GetCustomAttribute<RuleAttribute>();
            if (ra == null) continue;
            <button class="btn btn-dark" @onclick="() => {}">@ra.Name</button>
        }
    }
    else
    {
        foreach (FieldInfo field in EngineRule.GetType().GetFields().Reverse())
        {
            RuleFieldAttribute? fa = field.GetCustomAttribute<RuleFieldAttribute>();
            if (fa == null) continue;
            <div class="mb-3">
                <label class="form-label">@fa.Name</label>
                @{
                    string value = Settings[field.Name];
                }
                @if (field.FieldType == typeof(Regex))
                {
                    <InputTextArea rows="10" Value="@value" ValueExpression="() => value" ValueChanged="(value) => SetSetting(field.Name, value)" class="form-control" />
                }
                else
                {
                    <InputText Value="@value" ValueExpression="() => value" ValueChanged="(value) => SetSetting(field.Name, value)" class="form-control" />
                }
                @if (fa.Hint != null) {
                    <div class="form-text">@fa.Hint</div>
                }
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public int Index { get; set; }
    private string Error { get; set; } = "";
    private Type EngineRuleType = typeof(Rule);
    private Engine.Rule? EngineRule;
    private bool DeleteIntent = false;
    private Assembly EngineAssembly = Assembly.GetAssembly(typeof(Engine.Tikhole))!;
    private Dictionary<string, string> Settings = new();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Index < Engine.Matcher.Rules.Count && Index >= 0) EngineRule = Engine.Matcher.Rules[Index];
        if (EngineRule != null) EngineRuleType = EngineRule.GetType();
        LoadSettings();
    }
    private async void InvokeDelete()
    {
        if (DeleteIntent == true)
        {
            Delete();
            return;
        }
        DeleteIntent = true;
        await Task.Delay(2000);
        DeleteIntent = false;
        StateHasChanged();
    }
    private void LoadSettings()
    {
        foreach (FieldInfo field in EngineRuleType.GetFields().Reverse())
        {
            string value = field.GetValue(EngineRule)?.ToString() ?? "";
            if (field.FieldType == typeof(System.Timers.Timer))
            {
                value = ((System.Timers.Timer)field.GetValue(EngineRule)!).Interval.ToString();
            }
            Settings.Add(field.Name, value);
        }
    }
    private void SetSetting(string Setting, string Value)
    {
        Settings[Setting] = Value;
    }
    private void SaveSettings()
    {
        try
        {
            foreach (FieldInfo field in EngineRuleType.GetFields())
            {
                if (field.FieldType == typeof(Regex))
                {
                    field.SetValue(EngineRule, new Regex(Settings[field.Name]));
                }
                if (field.FieldType == typeof(System.Timers.Timer))
                {
                    field.SetValue(EngineRule, new System.Timers.Timer(double.Parse(Settings[field.Name])));
                }
                if (field.FieldType == typeof(Uri))
                {
                    field.SetValue(EngineRule, new Uri(Settings[field.Name]));
                }
                if (field.FieldType == typeof(string))
                {
                    field.SetValue(EngineRule, Settings[field.Name]);
                }
            }
            Engine.Configurator.SaveConfig();
            NavigationManager.NavigateTo("/Rules");
        }
        catch (Exception e)
        {
            Error = e.Message;
        }
    }
    private void Delete()
    {
        NavigationManager.NavigateTo("/Rules");
    }
}